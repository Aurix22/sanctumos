import { readFileSync, readdirSync, writeFileSync } from 'fs';
import { resolve, join } from 'path';
import YAML from 'yaml';

const SRC_DIR = resolve('src/revelex');
const OUT = resolve('src/revelex/generated.ts');

function loadAll() {
  const files = readdirSync(SRC_DIR).filter(f => f.endsWith('.revx.yaml') || f.endsWith('.revx.yml'));
  const docs = files.map(f => {
    const txt = readFileSync(join(SRC_DIR, f), 'utf8');
    return YAML.parse(txt);
  });
  // merge simple
  const out = { meta: [], defaults: {}, permissions: {}, apps: [] };
  for (const d of docs) {
    if (d?.meta) out.meta.push(d.meta);
    if (d?.defaults?.window) out.defaults.window = { ...(out.defaults.window||{}), ...d.defaults.window };
    if (Array.isArray(d?.permissions)) d.permissions.forEach(p => out.permissions[p.id] = p);
    if (Array.isArray(d?.apps)) out.apps.push(...d.apps);
  }
  return out;
}

function toTs(reg) {
  const esc = s => s.replace(/`/g,'\\`');
  const ts = `// AUTO-GENERATED BY tools/revx-gen.mjs â€“ DO NOT EDIT
export type RevelexPermission = { id: string; description?: string };
export type RevelexWindowDef = { title?: string; width?:number;height?:number;minWidth?:number;minHeight?:number;resizable?:boolean;state?:'normal'|'minimized'|'maximized'|'fullscreen' };
export type RevelexApp = {
  id: string; name: string; icon?: string; version: string; main: string;
  category?: string; autostart?: boolean; permissions?: string[];
  windows?: { main?: RevelexWindowDef }
};

export const RevelexDefaults = ${JSON.stringify(reg.defaults, null, 2)} as const;
export const RevelexPermissions: Record<string, RevelexPermission> = ${JSON.stringify(reg.permissions, null, 2)};
export const RevelexApps: RevelexApp[] = ${JSON.stringify(reg.apps, null, 2)};

// helpers
export function getAutostartApps(): RevelexApp[] { return RevelexApps.filter(a => a.autostart); }
`;
  return ts;
}

const reg = loadAll();
writeFileSync(OUT, toTs(reg));
console.log(`Revelex: wrote ${OUT}`);
