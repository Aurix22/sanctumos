module "sanctumos/kernel/memory"

/*
 * Speicherverwaltung
 *
 * Was? Dieses Modul stellt grundlegende Speicheroperationen bereit: es
 * verwaltet virtuelle Seiten, weist Speicher zu und schützt vor
 * Überläufen. In einem echten Kernel gäbe es zudem eine physische
 * Zuordnung, hier abstrahieren wir mit einfachen Strukturen.
 *
 * Warum? Unsachgemäße Speicherverwaltung ist die Ursache für viele
 * Sicherheitslücken. Durch Revelex‑Contracts können wir sicherstellen,
 * dass nur zulässige Seiten angefordert werden und dass keine
 * Speicherbereiche doppelt belegt werden.
 *
 * Wieso? Wir verwenden eine einfache Listenverwaltung. Jede Seite
 * besitzt eine Größe und einen Besitzer. Die Allokation fügt neue
 * Seiten hinzu; die Freigabe markiert sie als frei. Ein späterer
 * Garbage Collector ließe sich hinzufügen.
 */

// Darstellung einer Speicherseite
struct Page {
  addr: Int,
  size: Int,
  owner: Int,
  free: Bool
}

var page_table: List<Page> = []
var next_addr: Int = 0x1000

fn init() {
  page_table = []
  next_addr = 0x1000
  // initialisiere ein paar freie Seiten
  for i in 0..10 {
    let p = Page(addr=next_addr, size=4096, owner=0, free=true)
    page_table = page_table + [p]
    next_addr += 4096
  }
}

fn alloc_page(owner:Int, size:Int) => Page {
  ethos {
    require size > 0 and size <= 4096
  }
  // Suche freie Seite
  for i in 0..len(page_table)-1 {
    let p = page_table[i]
    if p.free == true and p.size >= size {
      // Markiere als belegt
      p.free = false
      p.owner = owner
      page_table[i] = p
      reflect { trace "mem_alloc", { owner: owner, addr: p.addr, size: size } }
      return p
    }
  }
  // Keine passende Seite gefunden → neue erstellen
  let addr = next_addr
  next_addr += 4096
  let p = Page(addr=addr, size=4096, owner=owner, free=false)
  page_table = page_table + [p]
  reflect { trace "mem_alloc_new", { owner: owner, addr: addr } }
  return p
}

fn free_page(p:Page) {
  // Seite freigeben
  for i in 0..len(page_table)-1 {
    if page_table[i].addr == p.addr {
      let tmp = page_table[i]
      ethos { require tmp.free == false }
      tmp.free = true
      tmp.owner = 0
      page_table[i] = tmp
      reflect { trace "mem_free", { addr: p.addr } }
      return
    }
  }
}
