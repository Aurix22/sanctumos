module "sanctumos/kernel/main"

/*
 * Revelation – SanctumOS Kernel Main Module
 *
 * Was? Dies ist der Startpunkt des Betriebssystems und orchestriert den
 * Aufbau aller Kernkomponenten. Beim Booten durchläuft das System mehrere
 * Phasen: Speicherinitialisierung, Scheduler‑Einrichtung, Einhängen des
 * Dateisystems, Netzwerkaktivierung und schließlich das Starten des
 * ersten Benutzerprozesses. Alle Schritte sind mit Contracts versehen,
 * um das Verhalten deterministisch und nachvollziehbar zu machen. Durch
 * `reflect { trace … }` werden Ereignisse geloggt und können über das
 * Tangle‑Ledger geprüft werden.
 *
 * Warum? In vielen Betriebssystemen ist der Bootprozess in C oder Assembler
 * versteckt. Fehler in frühen Initialisierungen bleiben unentdeckt und
 * lassen sich kaum auditieren. Revelex ermöglicht es, den gesamten
 * Startpfad in einer einzigen Hochsprache zu beschreiben und mit
 * Vorbedingungen zu versehen (z.B. dass genügend Speicher vorhanden
 * sein muss), was zu robusterem Code führt.
 *
 * Wieso? Wir verwenden eine modulare Struktur: jede Subkomponente ist
 * eigenständiges Modul, das hier importiert und initialisiert wird.
 * Der Hauptthread startet danach die erste Benutzeranwendung (die
 * Shell). Durch Contracts im Scheduler stellen wir sicher, dass
 * keine unendlichen Loops entstehen und dass Threads nicht mehr
 * Ressourcen verbrauchen als erlaubt.
 */

import "sanctumos/kernel/scheduler"    // Prozess- und Threadverwaltung
import "sanctumos/kernel/memory"       // Speicherverwaltung
import "sanctumos/kernel/filesystem"   // Dateisystem (SanctumFS)
import "sanctumos/kernel/network"      // Netzwerk (SanctumNet)
import "sanctumos/kernel/security"     // Sicherheitsprimitive
import "sanctumos/kernel/tangle"       // DAG-Ledger-Integration
import "sanctumos/kernel/quantum"      // Quantenintegration (qRetvm)
import "sanctumos/userland/shell"      // Shell-Programm

// Globale Kernelzustände
let kernel_initialized = false
var boot_log = []

fn log_event(name:String, details:Any) {
  // Hilfsfunktion zum Loggen von Boot‑Ereignissen
  boot_log = boot_log + [ { "event": name, "details": details } ]
  reflect { trace name, details }
}

fn init_kernel() {
  ethos {
    require kernel_initialized == false
  }
  // Speicher vorbereiten
  log_event("memory_init", { })
  memory.init()

  // Scheduler starten
  log_event("scheduler_init", { })
  scheduler.init()

  // Dateisystem einhängen
  log_event("filesystem_mount", { root: "/" })
  filesystem.mount_root()

  // Netzwerk aktivieren
  log_event("network_init", { })
  network.init()

  // Sicherheitslayer initialisieren
  log_event("security_init", { })
  security.init()

  // Tangle-Ledger binden
  log_event("tangle_init", { })
  tangle.init()

  // Quantum-Einheit initialisieren
  log_event("quantum_init", { })
  quantum.init()

  // Marke initialisiert
  kernel_initialized = true
  log_event("kernel_initialized", { ok: true })
}

fn launch_first_process() {
  ethos {
    require kernel_initialized == true
  }
  // Erzeuge Prozess für die Shell
  let proc = scheduler.create_process("shell", shell.main)
  scheduler.enqueue(proc)
  log_event("first_process_launched", { pid: proc.pid })
}

fn run() {
  // Hauptschleife des Kernels: init und Scheduling
  init_kernel()
  launch_first_process()

  // Scheduler Loop
  while true {
    scheduler.schedule_next()
  }
}

// Kick‑Off des Betriebssystems: die Startfunktion, die das OS hochfährt.
fn main() {
  reflect { trace "sanctumos_boot", { version: "1.0.0" } }
  run()
}
